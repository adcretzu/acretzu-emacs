#+PROPERTY: header-args:emacs-lisp :results silent
* Installation
  
  Requires the package =org-plus-contrib= beforehand.

  #+BEGIN_SRC emacs-lisp :tangle "../init.el" :exports code :results silent
    (require 'package)
    (package-initialize)

    (require 'ob-tangle)
    (org-babel-load-file "~/.emacs.d/acretzu-emacs/README.org")
  #+END_SRC

* Local Customizations

  #+BEGIN_SRC emacs-lisp
    (setq custom-file "~/.emacs.d/custom.el")
    (if (file-exists-p custom-file)
        (load-file custom-file))
  #+END_SRC

* Small Settings

** Package Archives

   Use the customize interface to generate my local settings that may
   vary from machine to machine.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
     (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
   #+END_SRC

   These are a list of packages that I keep installed on all
   systems. The code below will install the package if it is not
   already installed.

   #+BEGIN_SRC emacs-lisp
     (require 'cl)
     (defvar acretzu/packages
       '(org-plus-contrib
         writegood-mode
         expand-region))

     (defun acretzu/packages-installed-p ()
       (loop for p in acretzu/packages
             when (not (package-installed-p p)) do (return nil)
             finally (return t)))

     (unless (acretzu/packages-installed-p)
       ;; Need to update package contents
       (message "%s" "Emacs refreshing package contents...")
       (package-refresh-contents)
       (message "Done.")
       
       ;; Install the missing packages
       (dolist (p acretzu/packages)
         (when (not (package-installed-p p))
           (package-install p))))
   #+END_SRC

   Improves mouse wheel scrolling, so it is not irratic.
   
   #+BEGIN_SRC emacs-lisp
     (setq mouse-wheel-progressive-speed nil)
   #+END_SRC

   Make the mouse wheel scrolling amount one line, instead of the
   default of 5 lines.

   #+BEGIN_SRC emacs-lisp
     (setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
   #+END_SRC

   Make the =Delete= key delete forward isntead of acting like =Backspace=

   #+BEGIN_SRC emacs-lisp
     (global-set-key [delete] 'delete-char)
   #+END_SRC
   
   Remove the noisy bell, tool bar, menu bar, and scroll bar.

  #+BEGIN_SRC emacs-lisp
    (setq visible-bell t)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
  #+END_SRC

** General Key Bindings

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "<f9>") 'goto-line)
     (global-set-key (kbd "<f5>") 'revert-buffer)
     (global-set-key (kbd "C-=") 'er/expand-region)
     (global-set-key (kbd "C-c C-v p") 'match-paren)
     (ffap-bindings)
     (auto-compression-mode 1)
     (setq inhibit-splash-screen t)
   #+END_SRC

** Custom Commands

   #+BEGIN_SRC emacs-lisp
     (defun axc/highlight (delim)
       "Add highlighting to text"
       (let ((start
              (cond
               ((and transient-mark-mode mark-active) (region-beginning))
               ('t (point))
               )
              )
             (end
              (cond
               ((and transient-mark-mode mark-active) (region-end))
               ('t (point))
               )
              )
             )
         (goto-char end) (insert delim)
         (goto-char start) (insert delim)
         )
       )

     (defun axc/hl-y ()
       (interactive)
       (axc/highlight "†"))

     (defun axc/hl-o ()
       (interactive)
       (axc/highlight "‡"))

     (define-prefix-command 'axc/hl-map)

     (define-key axc/hl-map (kbd "y") 'axc/hl-y)
     (define-key axc/hl-map (kbd "o") 'axc/hl-o)

     (defun axc/indentbuffer ()
       "Indents the entire buffer"
       (interactive)
       (indent-region (point-min) (point-max)))

     (global-set-key (kbd "C-z") 'axc/indentbuffer)

     ;; Go to matching parentheses  
     (defun match-paren (arg)
       "Go to the matching parenthesis if on parenthesis otherwise insert %."
       (interactive "p")
       (cond 
        ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
        ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
        ((looking-at "\\s\{") (forward-list 1) (backward-char 1))
        ((looking-at "\\s\}") (forward-char 1) (backward-list 1))
        (t (self-insert-command (or arg 1)))
        ) ;; cond
       ) ;; defun


     ;; use this to change the name of the EMACS window
     (defun window-name (windowname)
       "This function will set the emacs window name as interactively specified"
       (interactive "sPlease enter the new name for the window: ")
       (modify-frame-parameters (selected-frame) (list (cons 'name windowname)))
       )
   #+END_SRC
* Org-mode

** Unknown

   #+BEGIN_SRC emacs-lisp
     (require 'ox-odt)
     (setq org-use-speed-commands t)
     (setq org-speed-commands-user
           '(("S" . widen)))
          (setq org-default-notes-file "~/org/tasks.org")

     (setq org-refile-targets '((org-agenda-files :maxlevel . 2)
                                (nil :maxlevel . 5)))

     ;; Org-agenda custom commands
     (setq org-agenda-custom-commands
           '(("A" "Tasks to be archived" tags "LEVEL=2/DONE"
              ((org-agenda-overriding-header "Tasks to archive")))
             ("r" "Tasks to be refiled" tags "+Refile"
              ((org-agenda-overriding-header "Tasks to refile")))))

     (setq org-capture-templates
           '(("t" "Todo" entry
              (file "~/org/tasks.org")
              "* TODO %?\n  %U\n %^{Effort}p %a" :clock-in t :clock-resume t)
             ("l" "Todo+Link" entry
              (file "~/org/tasks.org")
              "* TODO %?\n  %U\n %^{Effort}p %a\n %i" :clock-in t :clock-resume t)))

     (setq org-refile-use-outline-path 'file)

     (setq org-global-properties
           '(("Score_ALL" . "1 2 3 4 5 10")
             ("Effort_ALL" . "0 0:10 0:30 1:00 2:00 3:00 4:00")))

     (setq org-columns-default-format
           "%60ITEM(Task) %5Score{+} %10Effort(Effort){:} %10CLOCKSUM")
   #+END_SRC

** Babel
   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (sh . t)
        (perl . t)))
   #+END_SRC
  

** Key Bindings

   Key binding for org-capture
   
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c c") 'org-capture) 
     (global-set-key (kbd "<f12>") 'org-agenda)
   #+END_SRC

   

** Export
   
* IBuffer
  
  Setup for =ibuffer= key binding.

  #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x C-b") 'ibuffer)
  #+END_SRC

  Make the =ibuffer= columns more readable.
  
  #+BEGIN_SRC emacs-lisp
    (setq ibuffer-formats
       '((mark modified read-only " "
	       (name 50 50 :left :elide) " "
	       (size 3 -1 :right) " "
	       (mode 16 16 :left :elide) " " filename-and-process)
	 (mark " " (name 16 -1) " " filename)))
  #+END_SRC 
   
